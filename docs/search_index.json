[["cluster-selection-in-rural-areas.html", "Cluster selection in Rural areas Overview PHASE 1: Data Collection and Consolidation (First Pass) PHASE 2: Proportional Analysis and Sampling Preparation PHASE 3: Systematic Sampling and Results Generation (Second Pass)", " Cluster selection in Rural areas This section discusses the implementation of the app for cluster selection in rural areas. Basic Idea File structure State xyz / ├── Cluster Allocation.xlsm ├── District a / │ ├── PPS.xlsm │ ├── Block 1 data.xls │ ├── Block 2 data.xls │ ├── Block 3 data.xls │ ├── : │ └── : ├── District b / ├── District c / ├── : └── : Cluster Allocation.xlsm is present in all the state folders, and PPS.xlsm is present in all the district folders under each state. Block 1 data.xls contains the list of Gram Panchayats as shown in below. Functions Cluster ALLocation.xlsm ├── Module1 │ ├── func ALLinALL() │ └── func FilterByColor(PPSWorkbook As Workbook) └── Module2 └── func CalculateProportions() PPS.xlsm ├── Module1 │ └── func CopySheetsFromAllWorkbooks() ├── Module2 │ └── func TableCooker() ├── Module3 │ └── func CumulativeSumWithFormula() ├── Module4 │ └── func RandomSelector() └── Module5 └── func LoadTotal() * highlighted functions are the main tasks where the other functions are subtasks Program Flow chart Code knitr::include_graphics(&quot;flow-chart2.svg&quot;) Overview The ALLinALL macro implements a sophisticated three-phase data processing and sampling system designed for multi-directory statistical analysis. The system processes Excel files across multiple folders, consolidates data, calculates proportional distributions, and performs systematic sampling with multiple iterations. PHASE 1: Data Collection and Consolidation (First Pass) Purpose This phase discovers and processes data files across directory structures, creating a unified dataset for sampling procedure. Detailed Procedures 1.1 Directory Scanning and Setup currentDirectory = ThisWorkbook.Path dirName = Mid(currentDirectory, InStrRev(currentDirectory, &quot;\\&quot;) + 1) Function: Identifies the current working directory and extracts just the directory name Output: Creates a base reference for grouping data by location Data Flow: Directory name goes to Column A of the main worksheet 1.2 Folder Iteration and File Discovery For Each folder In fileSystem.GetFolder(currentDirectory).SubFolders PPSPath = folder.Path &amp; &quot;\\&quot; &amp; PPSFile Function: Systematically searches each subfolder for PPS.xlsm files Logic: Uses FileSystemObject for robust file system navigation Error Handling: Checks file existence with Dir(PPSPath) &lt;&gt; \"\" Data Flow: Folder names populate Column B of main worksheet ::: {align=“center”} ::: 1.3 TableCooker Execution (Core Data Processing) When a PPS.xlsm file is found, the system executes the `TableCooker` macro: Sub-Process: CopySheetsFromAllWorkbooks fileName = Dir(folderPath &amp; &quot;*.xls&quot;) Do While fileName &lt;&gt; &quot;&quot; For Each ws In sourceWorkbook.Sheets ws.Copy After:=currentWorkbook.Sheets(currentWorkbook.Sheets.Count) Function: Discovers and imports all Excel files (.xls) within each folder Logic: Creates a comprehensive dataset by merging multiple source files Sr. No. Gram Panchayat TOTAL C.P Selection 1 BIRSIEJ 750 2 I.C.A.R. 836 3 INGSAW 1184 4 ITPATUNG 131 5 ITSOHPAIR 710 Exclusion Rule: Skips the current workbook to avoid circular references Sub-Process: Data Standardization ws.Rows(&quot;1:6&quot;).Delete &#39; Remove headers ws.Rows(lastRow - 1 &amp; &quot;:&quot; &amp; lastRow).Delete &#39; Remove footers Function: Standardizes data structure across different source files Rationale: Removes inconsistent header/footer rows that vary between files Result: Clean, uniform data ready for statistical processing Sub-Process: Data Consolidation usedRange.Copy combinedSheet.Cells(lastTargetRow, 1).PasteSpecial Paste:=xlPasteValues Function: Merges all processed sheets into a single “CombinedData” sheet Method: Sequential appending maintains data integrity Memory Management: Uses PasteSpecial with values only to optimize performance 1.4 Statistical Preprocessing Cumulative Sum Calculation Range(&quot;G2&quot;).Value = Range(&quot;F2&quot;).Value .Range(&quot;G3&quot;, &quot;G&quot; &amp; ws.Rows.Count).Formula = &quot;=&quot; &amp; .Cells(3, &quot;F&quot;).Address &amp; &quot;+&quot; &amp; .Cells(2, &quot;G&quot;).Address Function: Creates running totals essential for systematic sampling Total Extraction total = ws.Cells(lastRow, &quot;G&quot;).Value ws.Range(&quot;O1&quot;).Value = total Function: Captures the final cumulative total for each dataset Storage: Places total in cell O1 for cross-reference Data Flow: This total becomes the basis for proportional calculations Phase 1 Output Column A: Directory name (grouping variable) Column B: Folder name (district identifier) Column C: Total values from each folder’s processed data Result: Master inventory of all available data sources with their statistical weights PHASE 2: Proportional Analysis and Sampling Preparation Purpose Calculates proportional distributions and determines sampling allocations based on collected data. Detailed Procedures 2.1 User Input Integration - total clusters requested userValue = Application.InputBox(&quot;Enter Total No. of clusters:&quot;, Type:=1) Integration: Multiplies proportions to determine actual number of clusters for each district 2.2 CalculateProportions Function Proportion Calculation ws.Cells(j, &quot;D&quot;).Value = ws.Cells(j, &quot;C&quot;).Value / sumC ws.Cells(j, &quot;E&quot;).Value = ws.Cells(j, &quot;D&quot;).Value * userValue Column D: Relative proportion (folder total ÷ directory total) Column E: Absolute allocation (proportion × total clusters requested) Column F: Rounded off values of Column E Phase 2 Output Column D: Proportional weights (0-1 scale) Column E: Actual cluster counts for sampling Purpose: Provides sampling parameters for Phase 3 execution PHASE 3: Systematic Sampling and Results Generation (Second Pass) Purpose Executes multiple iterations of systematic sampling across all data sources and generates comprehensive results. Detailed Procedures 3.1 Sampling Preparation Set PPSWorkbook = Workbooks.Open(PPSPath) valueForMacro = ws.Cells(rowCounter, 5).Value PPSWorkbook.Sheets(1).Range(&quot;O2&quot;).Value = valueForMacro Function: Reopens each PPS file for sampling Parameter Passing: Transfers calculated sample sizes (Column E) to O2 Setup: Prepares the sampling environment with correct parameters 3.2 Results Sheet Creation Set wsNew = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count)) wsNew.Name = folderName Function: Creates dedicated output sheets for each folder Organization: Maintains clear separation of results by data source Naming: Uses folder names for easy identification 3.3 RandomSelector Algorithm (Core Sampling Engine) Initialization and Cleanup ws.Columns(&quot;B:B&quot;).Interior.Color = xlNone Range(&quot;O5:O20&quot;).Delete Shift:=xlUp userInput = ws.Range(&quot;O2&quot;).Value Reset: Clears previous color coding and random values Parameter Loading: Gets sample size from Phase 2 calculations Preparation: Sets up clean environment for new sampling iteration Sampling Interval Calculation total = ws.Cells(lastRow, &quot;G&quot;).Value ws.Range(&quot;O3&quot;).Value = total / userInput O1Value = ws.Range(&quot;O3&quot;).Value Function: Calculates systematic sampling interval Formula: Total population ÷ desired sample size Random Start Generation and Selection rand_start = Rnd() * O1Value Do While counter &lt; userInput For i = 2 To lastRow If ws.Cells(i, &quot;G&quot;).Value &gt; rand_start Then ws.Cells(i, &quot;B&quot;).Interior.Color = RGB(255, 255, 0) &#39; Yellow rand_start = rand_start + O1Value counter = counter + 1 Random Start: Generates random starting point within first interval Systematic Selection: Adds interval size to select subsequent items Visual Marking: Colors selected rows yellow for identification Iteration Control: Continues until desired sample size reached 3.4 Multi-Iteration Processing For iterationcounter = 1 To repeatTimes Application.Run &quot;&#39;&quot; &amp; PPSWorkbook.Name &amp; &quot;&#39;!RandomSelector&quot; PPSWorkbook.Sheets(1).Range(&quot;M:O&quot;).Copy wsNew.Cells(1, pasteMOColumn) Function: Runs multiple independent sampling iterations Output Management: Places results side-by-side for comparison 3.5 FilterByColor and Data Extraction ws.Range(&quot;A1:H&quot; &amp; lastRow).AutoFilter field:=2, Criteria1:=RGB(255, 255, 0), Operator:=xlFilterCellColor Set visibleRange = filteredRange.SpecialCells(xlCellTypeVisible) visibleRange.Copy wsNew.Cells(1, pasteTableColumn) Function: Isolates selected (yellow) rows from the dataset Method: Uses Excel’s AutoFilter with color criteria Extraction: Copies only visible (selected) rows to results Layout: Arranges multiple iterations horizontally for analysis "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
